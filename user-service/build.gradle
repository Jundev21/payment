//gradle 은 task 기준으로 하여 빌드를 진행한다.
//task는 build.gradle에 작성되어진 문서들이다. task 는 groovy 문법을 사용해서 작성된다.
// plugin 은 프로젝트에 기능을 추가하여 사용 할 수 있도록 해준다.

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.palantir.docker' version '0.35.0'
}

group = 'com.user-service'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'com.h2database:h2'

    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation project(':common')
}

tasks.named('test') {
    useJUnitPlatform()
}

docker {
    println(tasks.bootJar.outputs.files)

    //이미지 이름
    name rootProject.name + '-' + project.name + ':' + version

    //도커 파일 위치
    dockerfile file('../Dockerfile')

    //도커 이미지에 어떤것을 넣을 것인가?
    files tasks.bootJar.outputs.files

    //도커 파일에 사용할 것들
    buildArgs('JAR_FILE' : tasks.bootJar.outputs.files.singleFile.name)
}
